above10V2(x)
columnMean <- function(x){
colnum <- ncol(x)
meancol <- numeric(colnum)
for(i in 1:colnum){
meancol[i] <- mean(x[,i])
}
meancol
}
columnMean(y)
y
columnMean(y)
columnMean(y)
columnMean(y)
columnMean(airquality)
#matrix means
columnMean <- function(x, removeNA = TRUE){
colnum <- ncol(x)
meancol <- numeric(colnum)
for(i in 1:colnum){
meancol[i] <- mean(x[,i], na.rm = removeNA)
}
meancol
}
columnMean(airquality)
columnMean(airquality)
columnMean(airquality)
columnMean(y)
airmiles
columnMean(airmiles)
formalArgs(above10())
formalArgs(above10
)
search()
y <- function(x){ y <- 2
y*y + g(x)}
g <- function(x) {x*y}
y <-10
f <- function(x){ y <- 2
y*y + g(x)}
y
f (3)
swirl()
swirl
load(swirl)
swirl()
library(swirl)
rm(list=ls())
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
TRUE != FALSE
5 != 7
5 != 7
5 !== 7
5 != 7
5 == 7
!(5 == 7)
FALSE & FALSE
& c(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 | 6 != 8 &&4 > 3.9
5 > 8 || 6 != 8 &&4 > 3.9
isTrue(6 > 4)
isTRUE(6 > 4)
identical('twins' | 'twins')
identical('twins' 'twins')
identical('twins','twins')
xor( 5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints)
any (ints < 0)
all (ints > 0)
0
0
install_from_swirl("Logic")
swirl()
qq
0
exit
quit
iinstall.packages("RMySQL")
install.packages("RMySQL")
library("RMySQL")
d <- dbConnect(MySQL(),user="genome",host = "gnome-mysql.cse.ucsc.edu")
d <- dbConnect(MySQL(),user="genome",host = "http://gnome-mysql.cse.ucsc.edu")
d <- dbConnect(MySQL(),user="genome",host = "127.0.0.1")
d <- dbConnect(MySQL(),user="genome",host = "127.0.0.1")
d <- dbConnect(MySQL(),user="root",host = "127.0.0.1")
d <- dbConnect(MySQL(),user="root",host = "127.0.0.1", password ="Xplorer")
d <- dbConnect(MySQL(),user="root",host = "127.0.0.1", password ="ramiro")
repoHtml <- GET("https://api.github.com/users/jtleek/repos")
repoHtml <- Get("https://api.github.com/users/jtleek/repos")
library("httr")
repoHtml <- Get("https://api.github.com/users/jtleek/repos")
repoHtml <- GET("https://api.github.com/users/jtleek/repos")
repoHtml
json1 <- content(repoHtml)
json2 <- jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2
names(json2)
head(json2)
names(json2)
json2$name
json2[[8]]
json2[[8]][1]
json2[[8][1]]
json2[[8]
json2[[8] ]
json2$name
json2$created_at
acs <- get("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- get("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- get("http://biostat.jhsph.edu/~jleek/contact.html")
acs <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
acs
nchar(acs)
nchar ?
?
)
?nchar()
nchar(acs)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readLines(con)
htmlcode[1]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
nchar(htmlcode[101])
con <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
con
con[4]
heaad(con[4])
head(con[4])
head(con)
library(readr)
fixeFile <- read.fwf(file = "c:/Users/Ramiro/Downloads/getdata_wksst8110.for", skip = 4, widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(fixeFile)
head(fixeFile[4])
sum(fixeFile[4])
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, pch=8, col ="red", main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- (Ozone~Wind,data=airquality)
p <- (Ozone~Wind, data=airquality)
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R", local = TRUE))
source(pathtofile("plot1.R"), local = TRUE)
source(pathtofile("plot2.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot( price~carat | color*cut , data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot( price~carat | color*cut , data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
swirl()
myedit(C:/Users/Ramiro/Documents/R/win-library/3.2/swirl/Courses/Exploratory_Data_Analysis/Working_with_Colors/initLesson.R)
myedit("C:/Users/Ramiro/Documents/R/win-library/3.2/swirl/Courses/Exploratory_Data_Analysis/Working_with_Colors/initLesson.R)
""
)
)
)
""
myedit("C:/Users/Ramiro/Documents/R/win-library/3.2/swirl/Courses/Exploratory_Data_Analysis/Working_with_Colors/initLesson.R")
swirl()
swirl()
sample(colors())
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len = 6))
p1 <- colorRampPalette(c("red",blue))
p1 <- colorRampPalette(c("red","blue))
""
)
')'
""
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green",0.5))
p3 <- colorRampPalette(c("blue","green"),alpha=.5))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch =19 , color= rgb(0,.5,.5))
plot(x,y,pch=19 , col= rgb(0,.5,.5))
plot(x,y,pch=19 , col= rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ,hwy, data = mpg)
qplot(displ,hwy, data = mpg, color = "drv")
qplot(displ,hwy, data = mpg, color = drv)
qplot(displ,hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy, data = mpg, geom = "boxplot")
qplot(drv,hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, aesthetic = drv)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(displ,hwy, data = mpg, facets =  . ~ drv)
qplot(hwy, data = mpg, facets =  drv ~ . , binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point","smooth"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(data = mpg, displ, hwy)
g <- ggplot(data = mpg, displ)
g <- ggplot(data = mpg)
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(aes("lm"))
g + geom_point() + geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm") + facet_grid( . ~ drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid( . ~ drv) +ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv), labs(title="Swirl Rules!", x="Displacement",y="Hwy Mileage"))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy
| Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2 , alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = false)
g + geom_point(aes(color = drv), size = 2 , alpha = 1/2)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv), theme_bw(base_family = "Times")
)
g + geom_point(aes(color = drv), theme_bw(base_family = "Times"))
g + geom_point(aes(color = drv))
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx,myy,type="l", ylim = c(-3,3))
g <- ggplot(data= testdata, x= myx, y = myy)
g <- ggplot(data= testdat, x= myx, y = myy)
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g +geom_line()
g +geom_line(ylim(-3,3))
g +geom_line(aes(ylim(-3,3)))
g +geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(dataset, aes(x = displ, y = hwy , color = factor(yer))
)
g <- ggplot(dataset, aes(x = displ, y = hwy , color = factor(yesr)))
g <- ggplot(dataset, aes(x = displ, y = hwy , color = factor(year)))
g <- ggplot(dataset, aes(x = displ, y = hwy ))
g <- ggplot(dataset)
g <- gg
g <- g
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size = 2 , color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size = 2 , color = "black") + labs(x="Displacement") + labs(y="Highway Mileage") + labs(title = "Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
swirl
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30 )
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut )
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut
)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut
)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm)"
)
qplot(carat, price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color = cut, geom_smooth ("lm"))
qplot(carat, price, data = diamonds, color = cut) +  geom_smooth ("lm")
qplot(carat, price, data = diamonds, color = cut) +  geom_smooth (eas("lm"))
qplot(carat, price, data = diamonds, color = cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut ) + geom_smooth(method="lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1, length = 4), na.rm = TRUE)
cutpoints
diamonds
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g  + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g  + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds , aes (carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
xyplot(x)
library(lattice)
xyplot(x,y)
xyplot(1,2)
xyplot(1)
xyplot(1)
xyplot()
xyplot(diamonds)
xyplot(diamonds$carat)
xyplot(diamonds$carat, diamonds$clarity)
xyplot(diamonds$carat, diamonds$clarity, dimonds)
xyplot(diamonds$carat, diamonds$clarity, diamonds)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(data = diamonds, aes(depth, price))
g
print(g)
qplot(votes, rating, data = movies)
?splom
?llines
version()
version
unzip ("activity.zip", exdir = ".")
data <- read.csv("activity.csv", na.strings = "NA")
unlink("activity.csv")
setwd("~/Personal/Coursera/Data Science/Reproducible Research/Week2Project/RepData_PeerAssessment1")
unzip ("activity.zip", exdir = ".")
data <- read.csv("activity.csv", na.strings = "NA")
unlink("activity.csv")
data$date <- as.Date(as.character(data$date),"%Y-%m-%d")
averageSteps <- aggregate(steps ~ interval + steps, data, FUN=mean)
missingValues <- data[is.na(data$steps),]
averageSteps[which(averageSteps$steps == missingValues$interval),]
averageSteps[which(averageSteps$interval == missingValues$interval),]
head(averageSteps[which(averageSteps$interval == missingValues$interval),])
View(averageSteps[which(averageSteps$interval == missingValues$interval),])
View(missingValues)
data2 <- data
data2$steps[which(is.na(data2$steps))]
data2$steps[which(missingValues)]
data2$steps[which(missingValues$steps)]
data[is.na(data$steps),]
data[is.na(data$steps),]
data[is.na(data$steps),]
for(i in 1:nrow(dataFrame)) {
row <- dataFrame[i,]
# do stuff with row
}
for(i in 1:nrow(dataFrame)) {
row <- dataFrame[i,]
# do stuff with row
}
for(i in 1:nrow(missingValues)) {
row <- missingValues[i,]
print(row$steps)
}
for(i in 1:nrow(missingValues)) {
row <- missingValues[i,]
print(row$interval)
}
averageSteps[which(averageSteps$steps == max(averageSteps$steps,
na.rm = TRUE)), ]
averageSteps[which(averageSteps$interval == 5, ]
averageSteps[which(averageSteps$interval == 5), ]
averageSteps$steps[which(averageSteps$interval == 5), ]
averageSteps[which(averageSteps$interval == 5), 1]
averageSteps[which(averageSteps$interval == 5), 2]
for(i in 1:nrow(missingValues)) {
row <- missingValues[i,]
#Get Mean Interval for missing interval
aux <- averageSteps[which(averageSteps$interval == row$interval), 2]
print(aux)
}
View(data2)
for(i in 1:nrow(missingValues)) {
row <- missingValues[i,]
#Get Mean Interval for missing interval
aux <- averageSteps[which(averageSteps$interval == row$interval), 2]
#Replace the mising step with the mean
data2$steps[which(is.na(data2$steps) & data2$interval == row$interval)]
}
View(data2)
View(data2)
for(i in 1:nrow(missingValues)) {
row <- missingValues[i,]
#Get Mean Interval for missing interval
aux <- averageSteps[which(averageSteps$interval == row$interval), 2]
#Replace the mising step with the mean
data2$steps[which(is.na(data2$steps) & data2$interval == row$interval)]<- aux
}
View(data2)
View(data)
View(data)
data2
is.na(data2)
sum(is.na(data2))
weekdays(date2$date)
weekdays(data2$date)
?weekdays
chron::is.weekend(data2$date)
date3 <- date2
data3 <- data2
data3$ne2 <- chron::is.weekend(data2$date)
data3
data3$ne2[which(data3$ne2)] <- "Weekend"
data3
data3$ne2[which(!data3$ne2)] <- "Weekday"
data3$ne2[which(data3$ne2!)] <- "Weekday"
data3$ne2 <- chron::is.weekend(data2$date)
data3$ne2[which(data3$ne2!)] <- "Weekend"
data3$ne2[which(data3$ne2)] <- "Weekend"
data3$ne2[which(is.FALSE(data3$ne2))] <- "Weekend"
data3$ne2[which(data3$ne2 == FALSE)] <- "Weekday"
data3
averageSteps <- aggregate(steps ~ interval + steps2, data, FUN=mean)
plot(averageSteps, type = "l",
main="Daily Activity Pattern",
xlab="Interval", col="green",  ylab = "Average Number of Steps")
weekendFlag <- chron::is.weekend(data2$date)
#Add the new Column
data2$weekend.identifier <- chron::is.weekend(data2$date)
#Assign Factor Values
data2$weekend.identifier[which(data2$weekend.identifier)] <- "Weekend"
data2$weekend.identifier[which(data2$weekend.identifier == FALSE )] <- "Weekday"
averageSteps <- aggregate(steps ~ interval + steps2, data2[which(data2$weekend.identifier == "Weekend")], FUN=mean)
plot(averageSteps, type = "l",
main="Daily Activity Pattern",
xlab="Interval", col="green",  ylab = "Average Number of Steps")
data2[which(data2$weekend.identifier == "Weekend")]
data2[which(data2$weekend.identifier == "Weekend")]
data2
data2[which(chron::is.weekend(data2$date))]
data2[which(chron::is.weekend(data2$date)),]
data2[which(data2$weekend.identifier == "Weekend"),]
averageSteps <- aggregate(steps ~ interval + steps2, data2[which(data2$weekend.identifier == "Weekend"),], FUN=mean)
plot(averageSteps, type = "l",
main="Daily Activity Pattern",
xlab="Interval", col="green",  ylab = "Average Number of Steps")
averageSteps <- aggregate(steps ~ interval + steps2, data2[which(data2$weekend.identifier == "Weekday"),], FUN=mean)
plot(averageSteps, type = "l",
main="Daily Activity Pattern",
xlab="Interval", col="green",  ylab = "Average Number of Steps")
averageSteps <- aggregate(steps ~ interval + steps, data2[which(data2$weekend.identifier == "Weekday"),], FUN=mean)
plot(averageSteps, type = "l",
main="Daily Activity Pattern",
xlab="Interval", col="green",  ylab = "Average Number of Steps")
